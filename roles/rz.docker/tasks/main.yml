---
- name: Remove docker
  package:
    name: docker
    state: absent

- name: Remove docker-engine
  package:
    name: docker-engine
    state: absent

- name: Remove docker.io
  package:
    name: docker.io
    state: absent

- name: Install apt-transport-https
  package:
    name: apt-transport-https
    state: present

- name: Install ca-certificates
  package:
    name: ca-certificates
    state: present

- name: Install curl
  package:
    name: curl
    state: present

- name: Install software-properties-common
  package:
    name: software-properties-common
    state: present

- name: Get Docker's official GPG key
  apt_key :
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

- name: Add Docker CE Stable Repository
  apt_repository:
    repo: "{{docker.repository}}"
    state: present

- name: Install docker-ce
  package:
    name: "{{docker.package}}"
    state: present

- name: Ensure docker group is present
  group:
    gid: '1337'
    name: docker
    state: present
    system: yes
  notify: restart docker

- name: Add user to docker group.
  user:
    name: "{{item}}"
    groups: docker
    append: yes
  loop: "{{docker.users}}"

- name: Install docker-compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{docker.compose.version}}/docker-compose-Linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: 0755
    checksum: "{{docker.compose.checksum}}"

- name: Install python-pip
  package:
    name:
      - python-pip
    state: present

- name: Install docker python module.
  pip:
    name: 
      - docker
      - paramiko
    state: present

- name: Ensure docker swarm is present.
  docker_swarm:
    state: present
    advertise_addr: "{{ansible_eth0.ipv4.address}}"
  when: 
    - docker.swarm.enabled
    - docker.swarm.node_type == 'manager'
    - docker.swarm.initial_manager is undefined or docker.swarm.initial_manager == hostname

- name: SSH Fingerprint initial manager.
  shell: "ssh-keyscan -H {{docker.swarm.initial_manager}}"
  when: 
    - docker.swarm.enabled
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname
  register: ssh_fingerprint

- name: Ensure .ssh directory exists
  file:
    path: /root/.ssh
    state: directory
  when: 
    - docker.swarm.enabled
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname
  
- name: Ensure known_hosts exists
  copy:
    content: "{{ssh_fingerprint.stdout}}"
    dest: /root/.ssh/known_hosts
  become: yes
  when: 
    - docker.swarm.enabled
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname

- name: Get Swarm Join Tokens.
  docker_swarm:
    state: inspect
    docker_host: "ssh://{{username}}@{{docker.swarm.initial_manager}}"
  register: swarm_info
  when: 
    - docker.swarm.enabled
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname

- name: Join Swarm As Manager Node.
  docker_swarm:
    state: join
    advertise_addr: "{{ansible_eth0.ipv4.address}}"
    join_token: swarm_info.swarm_facts.JoinTokens.Manager
    remote_addrs:
     - "{{ansible_eth0.ipv4.address}}:2377"
  when: 
    - docker.swarm.enabled
    - docker.swarm.node_type == 'manager'
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname

- name: Join Swarm As Worker Node.
  docker_swarm:
    state: join
    advertise_addr: "{{ansible_eth0.ipv4.address}}"
    join_token: swarm_info.swarm_facts.JoinTokens.Worker
    remote_addrs:
     - "{{ansible_eth0.ipv4.address}}:2377"
  when: 
    - docker.swarm.enabled
    - docker.swarm.node_type == 'worker'
    - docker.swarm.initial_manager is defined
    - docker.swarm.initial_manager != hostname
